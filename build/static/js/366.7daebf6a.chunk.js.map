{"version":3,"file":"static/js/366.7daebf6a.chunk.js","mappings":"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","sources":["../node_modules/@web3auth/base-solana-adapter/src/baseSolanaAdapter.ts","../node_modules/@web3auth/phantom-adapter/src/utils.ts","../node_modules/@web3auth/phantom-adapter/src/phantomAdapter.ts"],"sourcesContent":["import {\n  ADAPTER_EVENTS,\n  ADAPTER_STATUS,\n  AdapterInitOptions,\n  BaseAdapter,\n  CHAIN_NAMESPACES,\n  checkIfTokenIsExpired,\n  clearToken,\n  getChainConfig,\n  getSavedToken,\n  saveToken,\n  signChallenge,\n  UserAuthInfo,\n  verifySignedChallenge,\n  WalletLoginError,\n} from \"@web3auth/base\";\nimport bs58 from \"bs58\";\n\nexport abstract class BaseSolanaAdapter<T> extends BaseAdapter<T> {\n  async init(_?: AdapterInitOptions): Promise<void> {\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, 1);\n  }\n\n  async authenticateUser(): Promise<UserAuthInfo> {\n    if (!this.provider || this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError();\n\n    const { chainNamespace, chainId } = this.chainConfig;\n\n    const accounts = await this.provider.request<string[]>({\n      method: \"getAccounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      const existingToken = getSavedToken(accounts[0] as string, this.name);\n      if (existingToken) {\n        const isExpired = checkIfTokenIsExpired(existingToken);\n        if (!isExpired) {\n          return { idToken: existingToken };\n        }\n      }\n\n      const payload = {\n        domain: window.location.origin,\n        uri: window.location.href,\n        address: accounts[0],\n        chainId: parseInt(chainId, 16),\n        version: \"1\",\n        nonce: Math.random().toString(36).slice(2),\n        issuedAt: new Date().toISOString(),\n      };\n\n      const challenge = await signChallenge(payload, chainNamespace);\n      const encodedMessage = new TextEncoder().encode(challenge);\n      const signedMessage = await this.provider.request<Uint8Array>({\n        method: \"signMessage\",\n        params: {\n          message: encodedMessage,\n          display: \"utf8\",\n        },\n      });\n      const idToken = await verifySignedChallenge(\n        chainNamespace,\n        bs58.encode(signedMessage as Uint8Array),\n        challenge,\n        this.name,\n        this.sessionTime,\n        this.clientId,\n        this.web3AuthNetwork\n      );\n      saveToken(accounts[0] as string, this.name, idToken);\n      return {\n        idToken,\n      };\n    }\n    throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n  }\n\n  async disconnectSession(): Promise<void> {\n    super.checkDisconnectionRequirements();\n    const accounts = await this.provider.request<string[]>({\n      method: \"getAccounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      clearToken(accounts[0], this.name);\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n}\n","import type { IPhantomWalletProvider } from \"@web3auth/solana-provider\";\n\nexport function poll(callback: () => boolean | Promise<boolean>, interval: number, count: number): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    if (count > 0) {\n      setTimeout(async () => {\n        const done = await callback();\n        if (done) resolve(done);\n        if (!done)\n          poll(callback, interval, count - 1)\n            .then((res) => {\n              resolve(res);\n              return res;\n            })\n            .catch((err) => reject(err));\n      }, interval);\n    } else {\n      resolve(false);\n    }\n  });\n}\n\nexport const detectProvider = async (\n  options: { interval: number; count: number } = { interval: 1000, count: 3 }\n): Promise<IPhantomWalletProvider | null> => {\n  const isPhantomAvailable = typeof window !== \"undefined\" && !!(window as any).solana?.isPhantom;\n  if (isPhantomAvailable) {\n    return (window as any).solana;\n  }\n  const isAvailable = await poll(() => (window as any).solana?.isPhantom, options.interval, options.count);\n  if (isAvailable) return (window as any).solana;\n  return null;\n};\n","import {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapterSettings,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { BaseSolanaAdapter } from \"@web3auth/base-solana-adapter\";\nimport { IPhantomWalletProvider, PhantomInjectedProvider } from \"@web3auth/solana-provider\";\n\nimport { detectProvider } from \"./utils\";\nexport type PhantomAdapterOptions = BaseAdapterSettings;\n\nexport class PhantomAdapter extends BaseSolanaAdapter<void> {\n  readonly name: string = WALLET_ADAPTERS.PHANTOM;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.SOLANA;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.SOLANA;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public _wallet: IPhantomWalletProvider | null = null;\n\n  private phantomProvider: PhantomInjectedProvider | null = null;\n\n  get isWalletConnected(): boolean {\n    return !!(this._wallet?.isConnected && this.status === ADAPTER_STATUS.CONNECTED);\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    return this.phantomProvider?.provider || null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions = {}): Promise<void> {\n    await super.init(options);\n    super.checkInitializationRequirements();\n    this._wallet = await detectProvider({ interval: 500, count: 3 });\n    if (!this._wallet) throw WalletInitializationError.notInstalled();\n    this.phantomProvider = new PhantomInjectedProvider({ config: { chainConfig: this.chainConfig as CustomChainConfig } });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.PHANTOM);\n\n    try {\n      log.debug(\"initializing phantom adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached phantom provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    try {\n      super.checkConnectionRequirements();\n      this.status = ADAPTER_STATUS.CONNECTING;\n      this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.PHANTOM });\n\n      if (!this._wallet) throw WalletInitializationError.notInstalled();\n      if (!this._wallet.isConnected) {\n        const handleDisconnect = this._wallet._handleDisconnect;\n        try {\n          await new Promise<SafeEventEmitterProvider | null>((resolve, reject) => {\n            const connect = async () => {\n              await this.connectWithProvider(this._wallet as IPhantomWalletProvider);\n              resolve(this.provider);\n            };\n            if (!this._wallet) {\n              reject(WalletInitializationError.notInstalled());\n              return;\n            }\n            this._wallet.once(\"connect\", connect);\n            // Raise an issue on phantom that if window is closed, disconnect event is not fired\n            (this._wallet as IPhantomWalletProvider)._handleDisconnect = (...args: unknown[]) => {\n              reject(WalletInitializationError.windowClosed());\n              return handleDisconnect.apply(this._wallet, args);\n            };\n\n            this._wallet.connect().catch((reason: unknown) => {\n              reject(reason);\n            });\n          });\n        } catch (error: unknown) {\n          if (error instanceof Web3AuthError) throw error;\n          throw WalletLoginError.connectionError((error as Error)?.message);\n        } finally {\n          this._wallet._handleDisconnect = handleDisconnect;\n        }\n      } else {\n        await this.connectWithProvider(this._wallet);\n      }\n\n      if (!this._wallet.publicKey) throw WalletLoginError.connectionError();\n      this._wallet.on(\"disconnect\", this._onDisconnect);\n\n      return this.provider;\n    } catch (error: unknown) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw error;\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    await super.disconnectSession();\n    try {\n      await this._wallet?.disconnect();\n      if (options.cleanup) {\n        this.status = ADAPTER_STATUS.NOT_READY;\n        this.phantomProvider = null;\n        this._wallet = null;\n      }\n      await super.disconnect();\n    } catch (error: unknown) {\n      this.emit(ADAPTER_EVENTS.ERRORED, WalletLoginError.disconnectionError((error as Error)?.message));\n    }\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (!this.isWalletConnected) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  public async addChain(chainConfig: CustomChainConfig, init = false): Promise<void> {\n    super.checkAddChainRequirements(init);\n    this.phantomProvider?.addChain(chainConfig);\n    this.addChainConfig(chainConfig);\n  }\n\n  public async switchChain(params: { chainId: string }, init = false): Promise<void> {\n    super.checkSwitchChainRequirements(params, init);\n    await this.phantomProvider?.switchChain(params);\n    this.setAdapterSettings({ chainConfig: this.getChainConfig(params.chainId) as CustomChainConfig });\n  }\n\n  private async connectWithProvider(injectedProvider: IPhantomWalletProvider): Promise<SafeEventEmitterProvider | null> {\n    if (!this.phantomProvider) throw WalletLoginError.connectionError(\"No phantom provider\");\n    await this.phantomProvider.setupProvider(injectedProvider);\n    this.status = ADAPTER_STATUS.CONNECTED;\n    this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.PHANTOM, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n    return this.provider;\n  }\n\n  private _onDisconnect = () => {\n    if (this._wallet) {\n      this._wallet.off(\"disconnect\", this._onDisconnect);\n      this.rehydrated = false;\n      // ready to be connected again only if it was previously connected and not cleaned up\n      this.status = this.status === ADAPTER_STATUS.CONNECTED ? ADAPTER_STATUS.READY : ADAPTER_STATUS.NOT_READY;\n      this.emit(ADAPTER_EVENTS.DISCONNECTED);\n    }\n  };\n}\n"],"names":["BaseSolanaAdapter","BaseAdapter","async","_","this","chainConfig","getChainConfig","CHAIN_NAMESPACES","SOLANA","provider","status","ADAPTER_STATUS","CONNECTED","WalletLoginError","notConnectedError","chainNamespace","chainId","accounts","request","method","length","existingToken","getSavedToken","name","checkIfTokenIsExpired","idToken","payload","domain","window","location","origin","uri","href","address","parseInt","version","nonce","Math","random","toString","slice","issuedAt","Date","toISOString","challenge","signChallenge","encodedMessage","TextEncoder","encode","signedMessage","params","message","display","verifySignedChallenge","bs58","sessionTime","clientId","web3AuthNetwork","saveToken","super","checkDisconnectionRequirements","clearToken","rehydrated","emit","ADAPTER_EVENTS","DISCONNECTED","poll","callback","interval","count","Promise","resolve","reject","setTimeout","done","then","res","catch","err","detectProvider","_window$solana","options","arguments","undefined","solana","isPhantom","_window$solana2","PhantomAdapter","constructor","_defineProperty","WALLET_ADAPTERS","PHANTOM","ADAPTER_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","NOT_READY","_wallet","off","_onDisconnect","READY","isWalletConnected","_this$_wallet","isConnected","_this$phantomProvider","phantomProvider","Error","init","checkInitializationRequirements","WalletInitializationError","notInstalled","PhantomInjectedProvider","config","log","debug","autoConnect","connect","error","_this","checkConnectionRequirements","CONNECTING","adapter","connectWithProvider","handleDisconnect","_handleDisconnect","once","windowClosed","_len","args","Array","_key","apply","reason","Web3AuthError","connectionError","publicKey","on","ERRORED","cleanup","disconnectSession","_this$_wallet2","disconnect","disconnectionError","_this$phantomProvider2","checkAddChainRequirements","addChain","addChainConfig","_this$phantomProvider3","checkSwitchChainRequirements","switchChain","setAdapterSettings","injectedProvider","setupProvider","reconnected"],"sourceRoot":""}